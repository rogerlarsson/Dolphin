| package |
package := Package name: 'STON-Core'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: '# STON - Smalltalk Object Notation

[!![Build Status](https://travis-ci.org/svenvc/ston.svg?branch=master)](https://travis-ci.org/svenvc/ston)


A lightweight text-based, human-readable data interchange format 
for class-based object-oriented languages like Smalltalk.
It can be used to serialize domain level objects, 
either for persistency or network transport. 
As its name suggests, it is based on JSON (Javascript Object Notation). 
It adds symbols as a primitive value, class tags for object values and references. 
Implementations for Pharo Smalltalk, Squeak and Gemstone Smalltalk are available.


## Documentation

The original [Smalltalk Object Notation](https://github.com/svenvc/ston/blob/master/ston-paper.md) paper

The Pharo Enterprise book [STON](https://ci.inria.fr/pharo-contribution/job/EnterprisePharoBook/lastSuccessfulBuild/artifact/book-result/STON/STON.html) chapter

The most formal description is [The STON Specification](https://github.com/svenvc/ston/blob/master/ston-spec.md)

*Sven Van Caekenberghe* 
[MIT Licensed](https://github.com/svenvc/ston/blob/master/license.txt)

----

MIT License

Copyright (C) 2012 Sven Van Caekenberghe

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
'.


package setClassNames: #(
	#{STON}
	#{STON.CStyleCommentsSkipStream}
	#{STON.JSON}
	#{STON.ListWriter}
	#{STON.MapWriter}
	#{STON.Reader}
	#{STON.ReaderError}
	#{STON.Reference}
	#{STON.ShortListWriter}
	#{STON.StreamWriter}
	#{STON.Writer}
	#{STON.WriterError}
).

package setMethodNames: #(
	#(#{Core.Association} #stonOn:)
	#(#{Core.Bag} #stonOn:)
	#(#{Core.Bag class} #fromSton:)
	#(#{Core.Boolean} #stonContainSubObjects)
	#(#{Core.Boolean} #stonOn:)
	#(#{Core.ByteArray} #stonContainSubObjects)
	#(#{Core.ByteArray} #stonOn:)
	#(#{Core.ByteArray class} #fromSton:)
	#(#{Core.Character} #stonOn:)
	#(#{Core.Character class} #fromSton:)
	#(#{Core.Class} #stonOn:)
	#(#{Core.Class class} #fromSton:)
	#(#{Core.ClassDescription} #stonContainSubObjects)
	#(#{Core.Collection} #stonOn:)
	#(#{Core.Collection class} #fromSton:)
	#(#{Core.Date} #stonContainSubObjects)
	#(#{Core.DateAndTime} #stonContainSubObjects)
	#(#{Core.DateAndTime} #stonOn:)
	#(#{Core.DateAndTime class} #fromSton:)
	#(#{Core.Dictionary} #stonOn:)
	#(#{Core.Dictionary class} #fromSton:)
	#(#{Core.Fraction} #stonOn:)
	#(#{Core.Integer} #stonOn:)
	#(#{Core.Interval} #fromSton:)
	#(#{Core.Interval} #stonOn:)
	#(#{Core.Interval class} #fromSton:)
	#(#{Core.Metaclass} #instanceSide)
	#(#{Core.Metaclass} #stonName)
	#(#{Core.Metaclass} #stonOn:)
	#(#{Core.Metaclass class} #fromSton:)
	#(#{Core.Number} #stonContainSubObjects)
	#(#{Core.Number} #stonOn:)
	#(#{Core.Object} #fromSton:)
	#(#{Core.Object} #isStonReference)
	#(#{Core.Object} #stonContainSubObjects)
	#(#{Core.Object} #stonOn:)
	#(#{Core.Object} #stonPostReferenceResolution)
	#(#{Core.Object} #stonProcessSubObjects:)
	#(#{Core.Object} #stonShouldWriteNilInstVars)
	#(#{Core.Object class} #stonAllInstVarNames)
	#(#{Core.Object class} #stonName)
	#(#{Core.ScaledDecimal} #stonOn:)
	#(#{Core.SequenceableCollection} #stonOn:)
	#(#{Core.SequenceableCollection class} #fromSton:)
	#(#{Core.Set} #stonPostReferenceResolution)
	#(#{Core.String} #stonContainSubObjects)
	#(#{Core.String} #stonOn:)
	#(#{Core.String class} #findFirstInString:inSet:startingAt:)
	#(#{Core.Symbol} #stonOn:)
	#(#{Core.Time} #print24:showSeconds:on:)
	#(#{Core.Time} #stonContainSubObjects)
	#(#{Core.Time} #stonOn:)
	#(#{Core.Time class} #fromSton:)
	#(#{Core.UndefinedObject} #stonContainSubObjects)
	#(#{Core.UndefinedObject} #stonOn:)
	#(#{Graphics.Color} #stonContainSubObjects)
	#(#{Graphics.Point} #stonOn:)
	#(#{Graphics.Point class} #fromSton:)
).

package setPrerequisites: #(
	'..\..\..\Object Arts\Dolphin\Base\Dolphin'
	'..\..\..\Object Arts\Dolphin\MVP\Base\Dolphin Basic Geometry'
	'..\..\..\Object Arts\Dolphin\Base\Dolphin Legacy Date & Time'
	'..\..\..\Object Arts\Dolphin\MVP\Base\Dolphin MVP Base'
).

package!

"Class Definitions"!

Kernel.Namespace subclass: #STON
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #(#{Core private} #{Kernel private})
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object subclass: #'STON.CStyleCommentsSkipStream'
	instanceVariableNames: 'stream peekedCharacter delimiter escape'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object subclass: #'STON.JSON'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object subclass: #'STON.Reader'
	instanceVariableNames: 'readStream objects classes unresolvedReferences stringStream acceptUnknownClasses newLine convertNewLines'
	classVariableNames: 'NotFound'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object subclass: #'STON.Reference'
	instanceVariableNames: 'index'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object subclass: #'STON.StreamWriter'
	instanceVariableNames: 'writer first'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Object subclass: #'STON.Writer'
	instanceVariableNames: 'writeStream prettyPrint stonCharacters newLine asciiOnly jsonMode keepNewLines referencePolicy level objects'
	classVariableNames: 'STONCharacters STONSimpleSymbolCharacters'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Error subclass: #'STON.ReaderError'
	instanceVariableNames: 'streamPosition'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Error subclass: #'STON.WriterError'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
STON.StreamWriter subclass: #'STON.ListWriter'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
STON.StreamWriter subclass: #'STON.MapWriter'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
STON.ListWriter subclass: #'STON.ShortListWriter'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!Core.Association methodsFor!

stonOn: stonWriter
	self class == STON associationClass
		ifTrue: [stonWriter writeAssociation: self]
		ifFalse: [super stonOn: stonWriter]! !
!Core.Association categoriesFor: #stonOn:!public!ston! !

!Core.Bag methodsFor!

stonOn: stonWriter
	"Use a map with element-occurences pairs as representation"

	stonWriter 
		writeObject: self 
		do: [ stonWriter encodeMap: contents ]! !
!Core.Bag categoriesFor: #stonOn:!public!ston! !

!Core.Bag class methodsFor!

fromSton: stonReader
	"Read a map representation containing element/occurences pairs"
	
	| bag |
	bag := self new.
	stonReader parseMapDo: [ :key :value |
		bag add: key withOccurrences: value ].
	^ bag! !
!Core.Bag class categoriesFor: #fromSton:!public!ston! !

!Core.Boolean methodsFor!

stonContainSubObjects 
	^ false!

stonOn: stonWriter
	stonWriter writeBoolean: self! !
!Core.Boolean categoriesFor: #stonContainSubObjects!public!ston! !
!Core.Boolean categoriesFor: #stonOn:!public!ston! !

!Core.ByteArray methodsFor!

stonContainSubObjects 
	^ false!

stonOn: stonWriter
	"Use a hex representation"
	
	stonWriter writeObject: self listSingleton: self hex! !
!Core.ByteArray categoriesFor: #stonContainSubObjects!public!ston! !
!Core.ByteArray categoriesFor: #stonOn:!public!ston! !

!Core.ByteArray class methodsFor!

fromSton: stonReader
	"Use a hex representation"
	
	^ self readHexFrom: stonReader parseListSingleton! !
!Core.ByteArray class categoriesFor: #fromSton:!public!ston! !

!Core.Character methodsFor!

stonOn: stonWriter
	stonWriter writeObject: self listSingleton: self asString! !
!Core.Character categoriesFor: #stonOn:!public!ston! !

!Core.Character class methodsFor!

fromSton: stonReader
	"For Dolphin we have to override this because the first element of a UTF-encoded string may be a surrogate character (i.e. a code unit that is part of a code point).
	To get the full Character we need to read from a stream."

	^ stonReader parseListSingleton readStream next! !
!Core.Character class categoriesFor: #fromSton:!public!ston! !

!Core.Class methodsFor!

stonOn: stonWriter
	stonWriter 
		writeObject: self 
		listSingleton: self shortName asSymbol! !
!Core.Class categoriesFor: #stonOn:!public!ston! !

!Core.Class class methodsFor!

fromSton: stonReader
	| theClassName theClass |
	theClassName := stonReader parseListSingleton.
	theClass := theClassName asQualifiedReference value.
	^theClass! !
!Core.Class class categoriesFor: #fromSton:!public!ston! !

!Core.ClassDescription methodsFor!

stonContainSubObjects
	^ false! !
!Core.ClassDescription categoriesFor: #stonContainSubObjects!public!ston! !

!Core.Collection methodsFor!

stonOn: stonWriter
	"For collections we chose to write a list of elements as delivered by #do:
	This is not the best or most correct solution for all subclasses though,
	so some will revert to standard object behavior or chose another solution"
	
	stonWriter writeObject: self do: [
		stonWriter encodeList: self ]
! !
!Core.Collection categoriesFor: #stonOn:!public!ston! !

!Core.Collection class methodsFor!

fromSton: stonReader
	"For collections we chose to instanciate based a list of elements using #add:
	This is not the best or most correct solution for all subclasses though,
	so some will revert to standard object behavior or chose another solution."
	
	| collection |
	collection := self new.
	stonReader parseListDo: [ :each |
		collection add: each ].
	^ collection! !
!Core.Collection class categoriesFor: #fromSton:!public!ston! !

!Core.Date methodsFor!

stonContainSubObjects 
	^ false! !
!Core.Date categoriesFor: #stonContainSubObjects!accessing!public!ston! !

!Core.DateAndTime methodsFor!

stonContainSubObjects 
	^ false!

stonOn: stonWriter
	"Use an ISO representation with all details YYYY-MM-DDTHH:MM:SS.N+TZ (with optional nanoseconds and timezone offset)"

	stonWriter writeObject: self
		listSingleton: (String streamContents: [:stream | self printOn: stream withLeadingSpace: false])! !
!Core.DateAndTime categoriesFor: #stonContainSubObjects!public!ston! !
!Core.DateAndTime categoriesFor: #stonOn:!public!ston! !

!Core.DateAndTime class methodsFor!

fromSton: stonReader
	^ self readFrom: stonReader parseListSingleton readStream! !
!Core.DateAndTime class categoriesFor: #fromSton:!public!ston! !

!Core.Dictionary methodsFor!

stonOn: stonWriter
	"Instances of STON mapClass will be encoded directly, without a class tag.
	Other (sub)classes will be encoded with a class tag and will use a map representation. "

	self class == STON mapClass
		ifTrue: [stonWriter writeMap: self]
		ifFalse: [stonWriter writeObject: self do: [stonWriter encodeMap: self]]! !
!Core.Dictionary categoriesFor: #stonOn:!public! !

!Core.Dictionary class methodsFor!

fromSton: stonReader
	"Instances of STON mapClass will be read directly and won't arrive here.
	Other (sub)classes will use this method."
	
	| dictionary |
	dictionary := self new.
	stonReader parseMapDo: [ :key :value |
		dictionary at: key put: value ].
	^ dictionary! !
!Core.Dictionary class categoriesFor: #fromSton:!public!ston! !

!Core.Fraction methodsFor!

stonOn: stonWriter
	stonWriter writeFraction: self! !
!Core.Fraction categoriesFor: #stonOn:!public!ston! !

!Core.Integer methodsFor!

stonOn: stonWriter
	stonWriter writeInteger: self! !
!Core.Integer categoriesFor: #stonOn:!public!ston! !

!Core.Interval methodsFor!

fromSton: stonReader
	"Overwritten to get back the standard object behavior"
	
	stonReader parseNamedInstVarsFor: self!

stonOn: stonWriter
	"Overwritten to get back the standard object behavior"

	stonWriter writeObject: self! !
!Core.Interval categoriesFor: #fromSton:!public!ston! !
!Core.Interval categoriesFor: #stonOn:!public!ston! !

!Core.Interval class methodsFor!

fromSton: stonReader
	"Overwritten to get back the standard object behavior"
	
	^ self basicNew
		fromSton: stonReader;
		yourself! !
!Core.Interval class categoriesFor: #fromSton:!public!ston! !

!Core.Metaclass methodsFor!

instanceSide
	"For Pharo compatibility - used by STON"

	^instanceClass!

stonName
	^#Class!

stonOn: stonWriter
	stonWriter
		writeObject: self 
		listSingleton: self instanceSide name asSymbol! !
!Core.Metaclass categoriesFor: #instanceSide!accessing!private! !
!Core.Metaclass categoriesFor: #stonName!public!ston! !
!Core.Metaclass categoriesFor: #stonOn:!public!ston! !

!Core.Metaclass class methodsFor!

fromSton: stonReader
	| theClassName theClass theMetaclass |
	theClassName := stonReader parseListSingleton.
	theClass := theClassName asQualifiedReference value.
	theMetaclass := theClass class.
	^ theMetaclass! !
!Core.Metaclass class categoriesFor: #fromSton:!public!ston! !

!Core.Number methodsFor!

stonContainSubObjects 
	^ false!

stonOn: stonWriter
	stonWriter writeFloat: self asFloat! !
!Core.Number categoriesFor: #stonContainSubObjects!public!ston! !
!Core.Number categoriesFor: #stonOn:!public!ston! !

!Core.Object methodsFor!

fromSton: stonReader
	"Decode non-variable classes from a map of their instance variables and values.
	Override to customize and add a matching #toSton: (see implementors)."
	
	self class isVariable 
		ifTrue: [
			stonReader error: 'custom #fromSton: implementation needed for variable/indexable class' ]
		ifFalse: [
			stonReader parseNamedInstVarsFor: self ]!

isStonReference
	^ false!

stonContainSubObjects
	"Return true if I contain subObjects that should be processed, false otherwise.
	Overwrite when necessary. See also #stonProcessSubObjects:"
	
	^ true!

stonOn: stonWriter
	"Encode non-variable classes with a map of their instance variable and values.
	Override to customize and add a matching #fromSton: (see implementors)."

	self class isVariable 
		ifTrue: [
			stonWriter error: 'custom #stonOn: implementation needed for variable/indexable class' ]
		ifFalse: [
			stonWriter writeObject: self ]
!

stonPostReferenceResolution
	"Hook that is called when references were resolved processing this object or one of its sub objects. This will most probably influence hash values. Override to take appropriate action."!

stonProcessSubObjects: block
	"Execute block to (potentially) change each of my subObjects.
	In general, all instance and indexable variables are processed.
	Overwrite when necessary. Not used when #stonContainSubObjects returns false."
	
	"Note that this is not used at all by the DolpinSTONReader"

	1 to: self class instSize do: [ :each |
		self instVarAt: each put: (block value: (self instVarAt: each)) ].
	(self class isVariable and: [ self class isBytes not ])
		ifTrue: [
			1 to: self basicSize do: [ :each |
				self basicAt: each put: (block value: (self basicAt: each)) ] ]!

stonShouldWriteNilInstVars
	"Return true if my instance variables that are nil should be written out, 
	false otherwise. Overwrite when necessary. By default, return false."
	
	^ false! !
!Core.Object categoriesFor: #fromSton:!public!ston! !
!Core.Object categoriesFor: #isStonReference!public!ston! !
!Core.Object categoriesFor: #stonContainSubObjects!public!ston! !
!Core.Object categoriesFor: #stonOn:!public!ston! !
!Core.Object categoriesFor: #stonPostReferenceResolution!public!ston! !
!Core.Object categoriesFor: #stonProcessSubObjects:!public!ston! !
!Core.Object categoriesFor: #stonShouldWriteNilInstVars!public!ston!testing! !

!Core.Object class methodsFor!

stonAllInstVarNames
	"Override to encode my instances using a custom set of instance variables or to define their order."
	
	^ self allInstVarNames !

stonName
	"Override to encode my instances using a different class name.
	Use symbols as class name/tag."
	
	^ self shortName! !
!Core.Object class categoriesFor: #stonAllInstVarNames!public!ston! !
!Core.Object class categoriesFor: #stonName!public!ston! !

!Core.ScaledDecimal methodsFor!

stonOn: stonWriter
	stonWriter writeScaledDecimal: self! !
!Core.ScaledDecimal categoriesFor: #stonOn:!public!ston! !

!Core.SequenceableCollection methodsFor!

stonOn: stonWriter
	"Instances of STON listClass will be encoded directly, without a class tag.
	Other (sub)classes will be encoded with a class tag and will use a list representation. "

	self class == STON listClass
		ifTrue: [stonWriter writeList: self]
		ifFalse: [super stonOn: stonWriter]! !
!Core.SequenceableCollection categoriesFor: #stonOn:!public!ston! !

!Core.SequenceableCollection class methodsFor!

fromSton: stonReader
	"Overwritten to use #streamContents: and #nextPut:"
	
	^ self streamContents: [ :stream |
		stonReader parseListDo: [ :each |
			stream nextPut: each ] ]! !
!Core.SequenceableCollection class categoriesFor: #fromSton:!public!ston! !

!Core.Set methodsFor!

stonPostReferenceResolution
	"When references were resolved in me, the hash of my elements might have changed.
	Check if I am still healthy and rehash me if not."
	
	self isHealthy ifFalse: [ self rehash ]! !
!Core.Set categoriesFor: #stonPostReferenceResolution!public!ston! !

!Core.String methodsFor!

stonContainSubObjects 
	^ false!

stonOn: stonWriter
	stonWriter writeString: self! !
!Core.String categoriesFor: #stonContainSubObjects!public!ston! !
!Core.String categoriesFor: #stonOn:!public!ston! !

!Core.String class methodsFor!

findFirstInString: aSymbol inSet: aByteArray startingAt: anInteger
	^Error notYetImplemented! !
!Core.String class categoriesFor: #findFirstInString:inSet:startingAt:!public! !

!Core.Symbol methodsFor!

stonOn: stonWriter
	stonWriter writeSymbol: self! !
!Core.Symbol categoriesFor: #stonOn:!public!ston! !

!Core.Time methodsFor!

print24: hr24Boolean showSeconds: secsBoolean on: aWriteStream
	| format |
	format := hr24Boolean ifTrue: ['HH:mm'] ifFalse: ['hh:mm'].
	secsBoolean ifTrue: [format := format , ':ssfffffffff'].
	^Locale smalltalk
		printTime: self
		on: aWriteStream
		format: format!

stonContainSubObjects 
	^ false!

stonOn: stonWriter
	"Use an ISO style HH:MM:SS.N representation (with optional nanoseconds)"

	stonWriter writeObject: self
		listSingleton: (String streamContents: 
					[:stream |
					self
						print24: true
						showSeconds: true
						on: stream])! !
!Core.Time categoriesFor: #print24:showSeconds:on:!public!ston! !
!Core.Time categoriesFor: #stonContainSubObjects!public!ston! !
!Core.Time categoriesFor: #stonOn:!public!ston! !

!Core.Time class methodsFor!

fromSton: stonReader
	^ self readFrom: stonReader parseListSingleton readStream! !
!Core.Time class categoriesFor: #fromSton:!public!ston! !

!Core.UndefinedObject methodsFor!

stonContainSubObjects 
	^ false!

stonOn: stonWriter
	stonWriter writeNull! !
!Core.UndefinedObject categoriesFor: #stonContainSubObjects!public!ston! !
!Core.UndefinedObject categoriesFor: #stonOn:!public!ston! !

!Graphics.Color methodsFor!

stonContainSubObjects
	^ false! !
!Graphics.Color categoriesFor: #stonContainSubObjects!public!ston! !

!Graphics.Point methodsFor!

stonOn: stonWriter
	stonWriter writeObject: self streamShortList: [ :array |
		array add: x; add: y ]! !
!Graphics.Point categoriesFor: #stonOn:!public!ston! !

!Graphics.Point class methodsFor!

fromSton: stonReader
	"Point class>>new in Dolphin answers the immutable singleton zero instance, so we need to special case."

	| answer |
	answer := self basicNew.
	stonReader parseListDo: 
			[:each :index |
			index == 1 ifTrue: [answer x: each].
			index == 2 ifTrue: [answer y: each]].
	^answer! !
!Graphics.Point class categoriesFor: #fromSton:!public! !

"End of package definition"!

