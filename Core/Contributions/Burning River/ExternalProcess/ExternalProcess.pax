| package |
package := Package name: 'ExternalProcess'.
package paxVersion: 2.1;
	basicComment: 'Copyright (c) 2003-2004 Robert Jarvis

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

28-Feb-2003	Added millisecondsToWait.  Changed so that by default #executeSync
		will wait infinitely for the spawned process to complete.
22-Jun-2004	Added comment provided by Peter Kenny explaining how the various 
		directories used when spawning a process are related and used.
28-Jul-2004	Added processExitCode and threadExitCode instance variables and
			accessors.
		Added #executeCommand:inDirectory:waitForSeconds:stdin:stdout:stderr.
		Added STILL_ACTIVE to Win32Constants.
14-Mar-2009	Added PROCESS_INFORMATION compileDefinition to the pre-install
			script.  This classes structure definition is apparently not compiled in
			the base image.'.

package basicScriptAt: #preinstall put: 'Win32Constants at: ''STILL_ACTIVE'' ifAbsentPut: [ 259 ].'.

package setClassNames: #(
	#{OS.PROCESS_INFORMATION}
	#{OS.STARTUPINFOW}
	#{Smalltalk.ExternalProcess}
	#{Smalltalk.ExternalProcessExecuteError}
	#{Smalltalk.ExternalProcessWaitFailure}
	#{Smalltalk.ExternalProcessWaitTimeout}
).

package setMethodNames: #(
	#(#{OS.KernelLibrary} #createProcess:lpCommandLine:lpProcessAttributes:lpThreadAttributes:bInheritsHandles:dwCreationFlags:lpEnvironment:lpCurrentDirectory:lpStartupInfo:lpProcessInformation:)
).

package setPrerequisites: #(
	'..\..\..\Object Arts\Dolphin\Base\Dolphin'
	'..\InheritableFile\InheritableFile'
	'..\KernelLibraryExtensions\KernelLibraryExtensions'
).

package!

"Class Definitions"!

Core.Object subclass: #ExternalProcess
	instanceVariableNames: 'commandLine directory millisecondsToWait stdinFilename stdoutFilename stderrFilename si pi stdin stdout stderr processExitCode threadExitCode'
	classVariableNames: ''
	imports: #(#{Win32Constants})
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Error subclass: #ExternalProcessExecuteError
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Error subclass: #ExternalProcessWaitFailure
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Core.Notification subclass: #ExternalProcessWaitTimeout
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
OS.Win32Structure subclass: #'OS.PROCESS_INFORMATION'
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
		'_OffsetOf_dwProcessId' -> 16r8.
		'_OffsetOf_dwThreadId' -> 16rC.
		'_OffsetOf_hProcess' -> 16r0.
		'_OffsetOf_hThread' -> 16r4
	}!
OS.Win32Structure subclass: #'OS.STARTUPINFOW'
	instanceVariableNames: 'title desktop stdin stdout stderr'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
		'_OffsetOf_cbReserved2' -> 16r32.
		'_OffsetOf_dwFillAttribute' -> 16r28.
		'_OffsetOf_dwFlags' -> 16r2C.
		'_OffsetOf_dwSize' -> 16r0.
		'_OffsetOf_dwX' -> 16r10.
		'_OffsetOf_dwXCountChars' -> 16r20.
		'_OffsetOf_dwXSize' -> 16r18.
		'_OffsetOf_dwY' -> 16r14.
		'_OffsetOf_dwYCountChars' -> 16r24.
		'_OffsetOf_dwYSize' -> 16r1C.
		'_OffsetOf_hStdError' -> 16r40.
		'_OffsetOf_hStdInput' -> 16r38.
		'_OffsetOf_hStdOutput' -> 16r3C.
		'_OffsetOf_lpDesktop' -> 16r8.
		'_OffsetOf_lpReserved' -> 16r4.
		'_OffsetOf_lpReserved2' -> 16r34.
		'_OffsetOf_lpTitle' -> 16rC.
		'_OffsetOf_wShowWindow' -> 16r30
	}!

"Loose Methods"!

!OS.KernelLibrary methodsFor!

createProcess: aStringFileName lpCommandLine: cl lpProcessAttributes: pa lpThreadAttributes: ta bInheritsHandles: ih dwCreationFlags: flags lpEnvironment: env lpCurrentDirectory: cd lpStartupInfo: si lpProcessInformation: pi
	"The CreateProcess function creates a new process and its primary thread. 
	The new process runs the specified executable file. 

	BOOL CreateProcess(
		LPCTSTR lpApplicationName,  // name of executable module
		LPTSTR lpCommandLine,       // command line string
		LPSECURITY_ATTRIBUTES lpProcessAttributes,  // process security attributes
		LPSECURITY_ATTRIBUTES lpThreadAttributes,   // thread security attributes
		BOOL bInheritHandles,  // handle inheritance flag
		DWORD dwCreationFlags, // creation flags
		LPVOID lpEnvironment,  // pointer to new environment block
		LPCTSTR lpCurrentDirectory,   // pointer to current directory name
		LPSTARTUPINFO lpStartupInfo,  // pointer to STARTUPINFO
		LPPROCESS_INFORMATION lpProcessInformation  // pointer to PROCESS_INFORMATION
	);

 	Please see Win32 SDK help for more information."

	<stdcall: bool CreateProcessW lpwstr lpwstr SECURITY_ATTRIBUTES* SECURITY_ATTRIBUTES* bool dword lpvoid lpwstr STARTUPINFOW* PROCESS_INFORMATION*>
	^self invalidCall: _failureCode! !
!OS.KernelLibrary categoriesFor: #createProcess:lpCommandLine:lpProcessAttributes:lpThreadAttributes:bInheritsHandles:dwCreationFlags:lpEnvironment:lpCurrentDirectory:lpStartupInfo:lpProcessInformation:!public!win32 functions-process and thread! !

"End of package definition"!

