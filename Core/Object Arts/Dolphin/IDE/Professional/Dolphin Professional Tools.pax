| package |
package := Package name: 'Dolphin Professional Tools'.
package paxVersion: 2.1;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Smalltalk Professional Additional Tools.
Copyright (c) Object Arts Ltd, 2001-2006.

This package contains the additional tools (excluding Refactoring Browser extensions), over and above those in Dolphin Community Edition, that are included in Dolphin Professional. These tools are:

Idea Space - A workspace organisation tool that allows you to group together multiple tools as tabs within a single top-level shell.

Method Explorer - A drill-down method browser capable of showing the results of multiple searches.

ProcessMonitor - Displays a dynamically updating task list, much like the Windows NT/2K Task Manager, that can be used to monitor thread activity, attach debuggers to running processes, terminate processes, and change their priorities. Apart from revealing quite a lot about the inner workings of Dolphin, this can be a very useful tool for debugging in multi-threaded situations. 

SourceBrowser - A tool for viewing and managing the list of changed "source" objects (e.g. classes and packages) in a development system. It can be used to file them out, remove or add the changed flag, and make the underlying files writeable or readonly. It is particularly useful in conjunction with a file based source code control system such as SourceSafe or CVS.

System Browser - A class browser that includes a package filter, so that one can refine that part of the hierarchy displayed in the browser to only those parts relevant to a group of selected packages.'.

package basicPackageVersion: '6.2'.

package basicScriptAt: #postinstall put: 'EnvironmentBrowserShell initializeTool'.

package setClassNames: #(
	#{Smalltalk.AXControlBrowser}
	#{Smalltalk.ChoosePackagedClassDialog}
	#{Smalltalk.ClassDiagramPlugin}
	#{Smalltalk.DebugInfoPlugin}
	#{Smalltalk.Disassembler}
	#{Smalltalk.EnvironmentBrowserShell}
	#{Smalltalk.IdeaSpaceShell}
	#{Smalltalk.PackagedClassSelector}
	#{Smalltalk.PackagedResourceIdentifierDialog}
	#{Smalltalk.ProcessMonitor}
	#{Smalltalk.ProfessionalSmalltalkSystem}
	#{Smalltalk.ResourceListPlugin}
	#{Smalltalk.SystemBrowserShell}
	#{Smalltalk.UnitTestPlugin}
).

package setMethodNames: #(
	#(#{Core.Class} #correspondingTestCase)
	#(#{Core.ClassDescription} #correspondingTestCase)
	#(#{Core.Metaclass} #correspondingTestCase)
	#(#{Core.Process} #priorityName)
	#(#{Kernel.ProcessorScheduler} #nameOfPriority:)
	#(#{Smalltalk.PackageSelector} #browseDeployed)
	#(#{Smalltalk.PackageSelector} #browsePackageSources)
	#(#{Smalltalk.PackageSelector} #browseSources)
	#(#{Smalltalk.SmalltalkSystem} #openIdeaSpace)
	#(#{Smalltalk.SmalltalkToolShell} #addToNewIdeaSpace)
	#(#{Smalltalk.SmalltalkToolShell} #browseSystem)
	#(#{Smalltalk.SmalltalkToolShell} #destroy)
	#(#{Smalltalk.SmalltalkToolShell} #dragToolToIdeaSpace)
	#(#{Smalltalk.SmalltalkToolShell} #exit)
	#(#{Smalltalk.SmalltalkToolShell class} #addToNewIdeaSpace:)
	#(#{Smalltalk.SmalltalkToolShell class} #dragToolToIdeaSpace:)
	#(#{Smalltalk.SmalltalkWorkspaceDocument} #addToNewIdeaSpace)
	#(#{Smalltalk.SmalltalkWorkspaceDocument} #browseSources)
	#(#{Smalltalk.SmalltalkWorkspaceDocument} #dragToolToIdeaSpace)
	#(#{Smalltalk.StyledContainer class} #publishedAspectsOfInstances)
	#(#{UI.LinkButton class} #publishedAspectsOfInstances)
	#(#{UI.SlideyInneyOuteyThing class} #example1)
	#(#{UI.SlideyInneyOuteyThing class} #publishedAspectsOfInstances)
	#(#{UI.SysLinkView class} #publishedAspectsOfInstances)
	#(#{UI.SysLinkView class} #publishedEventsOfInstances)
	#(#{UI.Toolbar class} #resource_Idea_space_card_tools)
	#(#{XProgramming.SUnit.TestCase class} #correspondingTestCase)
).

package setPrerequisites: #(
	'..\..\ActiveX\Automation\ActiveX Automation'
	'..\..\ActiveX\Connection Points\ActiveX Connection Points'
	'..\..\ActiveX\OCX\ActiveX Control Hosting'
	'..\Base\Development System'
	'..\..\Base\Dolphin'
	'..\..\MVP\Base\Dolphin Basic Geometry'
	'..\..\MVP\Presenters\Boolean\Dolphin Boolean Presenter'
	'..\..\MVP\Views\Cards\Dolphin Card Containers'
	'..\..\MVP\Views\Common Controls\Dolphin Common Controls'
	'..\..\MVP\Dialogs\Common\Dolphin Common Dialogs'
	'..\Community Edition\Dolphin Community Edition Tools'
	'..\..\MVP\Views\Control Bars\Dolphin Control Bars'
	'..\..\MVP\Presenters\Image\Dolphin Image Presenter'
	'..\..\MVP\Models\List\Dolphin List Models'
	'..\..\MVP\Presenters\List\Dolphin List Presenter'
	'..\..\Base\Dolphin Message Box'
	'..\..\MVP\Base\Dolphin MVP Base'
	'..\..\MVP\Presenters\Radio\Dolphin Radio Buttons'
	'..\..\MVP\Views\Scintilla\Dolphin Scintilla View'
	'..\..\MVP\Views\Sliding Tray\Dolphin Slidey-Inney-Outey Thing'
	'..\..\MVP\Views\Styled Views\Dolphin Styled Views'
	'..\..\MVP\Views\SysLink\Dolphin SysLink Control'
	'..\..\MVP\Presenters\Text\Dolphin Text Presenter'
	'..\..\MVP\Icons\Dolphin Text Tile Icons'
	'..\..\MVP\Models\Tree\Dolphin Tree Models'
	'..\..\MVP\Type Converters\Dolphin Type Converters'
	'..\..\MVP\Models\Value\Dolphin Value Models'
	'..\..\ActiveX\COM\OLE COM'
	'..\..\..\..\Contributions\Camp Smalltalk\SUnit\SUnit'
	'..\..\..\..\Contributions\Camp Smalltalk\SUnit\SUnitLegacy'
	'..\..\ActiveX\Shell\Windows Shell'
	'..\..\ActiveX\Components\XML DOM\XML DOM'
).

package!

"Class Definitions"!

Kernel.InstructionInterpreter subclass: #Disassembler
	instanceVariableNames: 'stream'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
CommunityEditionSmalltalkSystem subclass: #ProfessionalSmalltalkSystem
	instanceVariableNames: 'systemBrowserClass ideaSpaceClass packagedResourceIdentifierDialogClass'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
ClassBrowserPlugin subclass: #ClassDiagramPlugin
	instanceVariableNames: 'classesPresenter'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
ClassBrowserPlugin subclass: #DebugInfoPlugin
	instanceVariableNames: 'disassemblyPresenter sourcePresenter textMapPresenter toggleDebugPresenter toggleOptimisedPresenter method'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
ClassBrowserPlugin subclass: #ResourceListPlugin
	instanceVariableNames: 'resourcesPresenter flags'
	classVariableNames: 'ShowInheritedResourcesMask ShowSubclassResourcesMask'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
ClassBrowserPlugin subclass: #UnitTestPlugin
	instanceVariableNames: 'result icon autoSwitchProcess defectsPresenter modePresenter detailsPresenter'
	classVariableNames: 'AutoSwitchDelayMs ErrorColor FailColor NoTestsColor PassColor RunningColor'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
ClassSelector subclass: #PackagedClassSelector
	instanceVariableNames: 'packagesPresenter'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
ResourceIdentifierDialog subclass: #PackagedResourceIdentifierDialog
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
ChooseClassDialog subclass: #ChoosePackagedClassDialog
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
SmalltalkToolShell subclass: #AXControlBrowser
	instanceVariableNames: 'site windowStatus inspector eventsPresenter flags traceWindow progId'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
		'TraceMask' -> 16r1
	}!
SmalltalkToolShell subclass: #IdeaSpaceShell
	instanceVariableNames: 'cardsPresenter backgroundPresenter defaultMenuBar cardHistory filename'
	classVariableNames: ''
	imports: #(#{OS.Win32Constants})
	classInstanceVariableNames: ''
	classConstants: {}!
SmalltalkToolShell subclass: #ProcessMonitor
	instanceVariableNames: 'listPresenter updateInterval'
	classVariableNames: 'UpdateIntervals'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
ClassBrowserAbstract subclass: #EnvironmentBrowserShell
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
ClassBrowserAbstract subclass: #SystemBrowserShell
	instanceVariableNames: ''
	classVariableNames: 'AutoSelectPackages'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!Core.Class methodsFor!

correspondingTestCase
	"Answer a corresponding <TestCase> class that can be used to unit test the receiver. Answer nil if
	an appropriate test case is not available"

	| testsEnvironment |
	testsEnvironment := environment at: #Tests ifAbsent: [environment].
	#('Test' 'Tests' 'TestCase' 'TestCases') do: 
			[:each |
			| testName |
			testName := self name , each.
			(testsEnvironment lookup: testName) ifNotNil: [:testClass | ^testClass]].
	^nil! !
!Core.Class categoriesFor: #correspondingTestCase!development!public! !

!Core.ClassDescription methodsFor!

correspondingTestCase
	"Answer a corresponding <TestCase> class that can be used to unit test the receiver. Answer nil if an appropriate test case is not available"

	^self subclassResponsibility! !
!Core.ClassDescription categoriesFor: #correspondingTestCase!development!public! !

!Core.Metaclass methodsFor!

correspondingTestCase
	"Answer a corresponding <TestCase> class that can be used to unit test the receiver. Answer nil if an appropriate test case is not available"

	^self instanceClass correspondingTestCase! !
!Core.Metaclass categoriesFor: #correspondingTestCase!development!public! !

!Core.Process methodsFor!

priorityName
	"Answer symbolic name of the receiver's priority (see ProcessorScheduler)."

	^Processor nameOfPriority: self priority
! !
!Core.Process categoriesFor: #priorityName!accessing!public! !

!Kernel.ProcessorScheduler methodsFor!

nameOfPriority: anInteger
	"Answer the name of the specified priority"

	^#(
		systemBasePriority
		systemBackgroundPriority
		userBackgroundPriority
		userLowerPriority
		userSchedulingPriority
		userBoostedPriority
		userInterruptPriority
		lowIOPriority
		highIOPriority
		timingPriority)
			at: anInteger ifAbsent: [#unknownPriority]! !
!Kernel.ProcessorScheduler categoriesFor: #nameOfPriority:!enquiries!public! !

!PackageSelector methodsFor!

browseDeployed
	"Open a new <EnvironmentBrowserShell> on the deployed application content as read from the stripper log."

	[self systemModel browseDeployedPackage: self singlePackage] on: Error
		do: 
			[:ex |
			MessageBox errorMsg: 'Invalid Manifest'
				caption: ('Error browsing <1d>' expandMacrosWith: self singlePackage)]!

browsePackageSources
	"Private - Open a browser on the sources for the currently selected package."

	| packages |
	packages := self packages select: [:each | each isUsingPAX].
	packages size ~= self packages size
		ifTrue: 
			[MessageBox
				notify: 'Some of the selected packages are not using PAX source mode.
These will be omitted from the Source Browser display.'].
	SourceBrowser forSourcesOfPackages: packages!

browseSources
	"Private - Open a browser on the sources for the currently selected package."

	self browsePackageSources! !
!PackageSelector categoriesFor: #browseDeployed!commands!public! !
!PackageSelector categoriesFor: #browsePackageSources!commands!private! !
!PackageSelector categoriesFor: #browseSources!commands!private! !

!SmalltalkSystem methodsFor!

openIdeaSpace
	"Create a new IdeaSpace by opening a template file"

	^IdeaSpaceShell open! !
!SmalltalkSystem categoriesFor: #openIdeaSpace!commands!public! !

!SmalltalkToolShell methodsFor!

addToNewIdeaSpace
	^self class addToNewIdeaSpace: self!

browseSystem
	"Open a new system browser on Object."

	^self systemModel browseSystem!

destroy
	"Attempt to forcibly close the receiver's view. If this is an IdeaSpace card then we ask the IdeaSpace to destroy it."

	self isIdeaSpaceCard ifTrue: [^self ideaSpace destroyCard: self].
	^super destroy!

dragToolToIdeaSpace
	^self class dragToolToIdeaSpace: self!

exit
	"Attempt to close the receiver's view. If this is an IdeaSpace card then we ask the IdeaSpace to close it."

	self isIdeaSpaceCard ifTrue: [^self ideaSpace closeCard: self].
	^super exit! !
!SmalltalkToolShell categoriesFor: #addToNewIdeaSpace!public! !
!SmalltalkToolShell categoriesFor: #browseSystem!commands!public! !
!SmalltalkToolShell categoriesFor: #destroy!commands!public! !
!SmalltalkToolShell categoriesFor: #dragToolToIdeaSpace!public! !
!SmalltalkToolShell categoriesFor: #exit!commands!public! !

!SmalltalkToolShell class methodsFor!

addToNewIdeaSpace: aSmalltalkToolShell 
	IdeaSpaceShell show absorbCard: aSmalltalkToolShell!

dragToolToIdeaSpace: aSmalltalkToolShell 
	| shellFinder ideaSpaceFound |
	shellFinder := VisualShellFinder for: IdeaSpaceShell.
	shellFinder
		foundCursor: (Icon fromId: 'IDEASPACESHELLADD.ICO');
		notFoundCursor: (Icon fromId: 'IDEASPACESHELLADDDISABLED.ICO');
		findObject.
	ideaSpaceFound := shellFinder value.
	ideaSpaceFound isNil ifTrue: [^self].
	ideaSpaceFound absorbCard: aSmalltalkToolShell! !
!SmalltalkToolShell class categoriesFor: #addToNewIdeaSpace:!public! !
!SmalltalkToolShell class categoriesFor: #dragToolToIdeaSpace:!public! !

!SmalltalkWorkspaceDocument methodsFor!

addToNewIdeaSpace
	^IdeaSpaceShell addToNewIdeaSpace: self!

browseSources
	"Open a new source browser on the entire system sources"
	
	self model browseSources!

dragToolToIdeaSpace
	^IdeaSpaceShell dragToolToIdeaSpace: self! !
!SmalltalkWorkspaceDocument categoriesFor: #addToNewIdeaSpace!public! !
!SmalltalkWorkspaceDocument categoriesFor: #browseSources!commands!public! !
!SmalltalkWorkspaceDocument categoriesFor: #dragToolToIdeaSpace!public! !

!StyledContainer class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	| aspects |
	aspects := super publishedAspectsOfInstances.
	aspects
		add: ((Aspect name: #styledPen
					chooseFrom: #('nil' 'StyledPen solid' 'StyledPen dotted' 'StyledPen dashed' 'StyledPen dashDot' 'StyledPen dashDotDot'))
					beImmutable;
					isNullable: true;
					yourself);
		add: ((Aspect name: #styledShadow chooseFrom: #('nil' 'StyledShadow new'))
					beImmutable;
					isNullable: true;
					yourself);
		add: ((Aspect name: #styledBrush
					chooseFrom: #('nil' 'StyledGradientBrush black' 'StyledGradientBrush white' 'StyledGradientBrush face3dTopToBottomFade' 'StyledGradientBrush face3dLeftToRightFade' 'StyledGradientBrush face3dTopLeftToBottomRightFade'))
					isNullable: true;
					yourself);
		add: ((Aspect name: #cornerRadii)
					isNullable: false;
					beImmutable;
					yourself);
		add: (Aspect boolean: #isAntialiased);
		add: ((Aspect collection: #edges addEvaluationFrom: #('#left' '#right' '#top' '#bottom'))
					beImmutable;
					isNullable: false;
					yourself).
	^aspects! !
!StyledContainer class categoriesFor: #publishedAspectsOfInstances!constants!public! !

!UI.LinkButton class methodsFor!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	| answer |
	answer := super publishedAspectsOfInstances.
	answer
		add: (Smalltalk.Aspect multilineString: #text);
		add: (Smalltalk.Aspect name: #commandDescription) beReadOnly;
		yourself.
	^answer! !
!UI.LinkButton class categoriesFor: #publishedAspectsOfInstances!constants!public! !

!UI.SlideyInneyOuteyThing class methodsFor!

example1
	"
	self example1UI.SlideyInneyOuteyThing
	"
	| s cards tree l t |
	s := SlideyInneyOuteyThing new showShell.
	s isTrayResizable: true.
	s animation: #slide.
	cards := s tray.
	cards name: 'cards'.
	s parentView layoutManager: ProportionalLayout new.
	s parentView addSubView: Splitter new.
	tree := cards addSubView: TreeView new.
	tree model: Smalltalk.ClassHierarchyModel withAllClasses.
	tree viewMode: #smallIcons.
	t := s parentView addSubView: Scintilla.ScintillaView new.
	t text: Object comment.
	tree arrangement: 'Tree'.
	l := cards addSubView: ListView new.
	l arrangement: 'List'.
	l model list: View methodDictionary keys asSortedCollection!

publishedAspectsOfInstances
	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."

	| aspects |
	aspects := super publishedAspectsOfInstances.
	#(#layoutManager #isTransparent #isTabStop #isGroupStop #isDragSource #isDropTarget) 
		do: [:each | aspects removeKey: each].
	#(#isHiddenOnUnpin #isTrayResizable #isCardChangeAnimated) 
		do: [:each | aspects add: (Smalltalk.Aspect boolean: each)].
	aspects add: (Smalltalk.Aspect choice: #animation from: Animations keys asSortedCollection).
	^aspects! !
!UI.SlideyInneyOuteyThing class categoriesFor: #example1!examples!public! !
!UI.SlideyInneyOuteyThing class categoriesFor: #publishedAspectsOfInstances!constants!public! !

!UI.SysLinkView class methodsFor!

publishedAspectsOfInstances
    	"Answer a <LookupTable> of the <Aspect>s published by instances of the receiver."
    
    	^(super publishedAspectsOfInstances)
    		add: (Smalltalk.Aspect multilineString: #text);
    		yourself!

publishedEventsOfInstances
    	"Answer a Set of Symbols that describe the published events triggered
    	by instances of the receiver."
    
    	^super publishedEventsOfInstances
    		add: #linkClicked:;
    		yourself.
    ! !
!UI.SysLinkView class categoriesFor: #publishedAspectsOfInstances!constants!public! !
!UI.SysLinkView class categoriesFor: #publishedEventsOfInstances!events!public! !

!UI.Toolbar class methodsFor!

resource_Idea_space_card_tools
	"Answer the literal data from which the 'Idea space card tools' resource can be reconstituted.
	DO NOT EDIT OR RECATEGORIZE THIS METHOD.

	If you wish to modify this resource evaluate:
	ViewComposer openOn: (ResourceIdentifier class: self selector: #resource_Idea_space_card_tools)
	"

	^#(#'!!STL' 4 788558 10 ##(UI.STBViewProxy) ##(UI.Toolbar) 34 25 nil nil 34 2 8 1409289036 131137 416 nil nil nil 517 nil nil nil 416 327686 ##(Smalltalk.Color) #default 8 1903898080 170 192 8 #() 170 192 34 10 51221 1115206 1 ##(UI.ToolbarIconButton) 416 1 1180998 4 ##(UI.CommandDescription) #cardHistoryForward 8 'Forward' 1 1 263494 3 ##(Smalltalk.Icon) nil true 1572870 ##(Smalltalk.ImageRelativeFileLocator) 8 'HistoryForward.ico' 2032142 ##(Smalltalk.STBExternalResourceLibraryProxy) 8 'dolphindr7.dll' nil 51221 51227 594 416 1 626 #closeCard 8 'Close This Card' 1 1 788806 1 ##(Smalltalk.TextTileIcon) $\x2716 nil nil nil nil nil 1 nil nil 51227 51223 594 416 1 626 #moveCardLeft 8 'Move Card Left' 1 1 850 $\x25C0 8 'Cambria' nil 482 #menuHilight nil nil 1 nil nil 51223 51219 594 416 1 626 #cardHistoryBack 8 'Back' 1 1 674 nil true 720 8 'HistoryBack.ico' 768 51219 51225 594 416 1 626 #moveCardRight 8 'Move Card Right' 1 1 850 $\x25B6 8 'Cambria' nil 960 nil nil 1 nil nil 51225 34 7 1049158 1 ##(UI.ToolbarSeparator) 416 1 976 608 1154 416 1 880 1056 800 nil nil 1 nil nil nil nil nil 983302 ##(Smalltalk.MessageSequence) 138 144 34 2 721670 ##(Smalltalk.MessageSend) #createAt:extent: 34 2 328198 ##(Smalltalk.Point) 3839 21 1314 263 51 416 1266 #updateSizePosted 544 416 983302 ##(OS.WINDOWPLACEMENT) 8 #[44 0 0 0 0 0 0 0 1 0 0 0 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 127 7 0 0 10 0 0 0 2 8 0 0 35 0 0 0] 8 #() 1314 193 193 nil 27)! !
!UI.Toolbar class categoriesFor: #resource_Idea_space_card_tools!public!resources-views! !

!XProgramming.SUnit.TestCase class methodsFor!

correspondingTestCase
	^self! !
!XProgramming.SUnit.TestCase class categoriesFor: #correspondingTestCase!public! !

"End of package definition"!

