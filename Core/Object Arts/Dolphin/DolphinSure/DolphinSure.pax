| package |
package := Package name: 'DolphinSure'.
package paxVersion: 2;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Smalltalk "DolphinSure" encryption and signature support.
Copyright (c) Object Arts Ltd, 1999-2000.

This package contains digital encryption and code signing/certification facilities..

The DolphinSureTrustedData class provides a vehicle for signing data with a particular publisher certificate in such a way that it can be verified to be unchanged after transmission via an insecure medium. To sign data you will need an appropriate DolphinSureCertificate. Such certificates can be obtained from Object Arts Ltd at http://www.object-arts.com/DolphinSure.

For documentation evaluate:
	SmalltalkSystem help: ''DolphinSure'''.

package basicPackageVersion: '6.1'.


package setClassNames: #(
	#{BCryptConstants}
	#{BCryptLibrary}
	#{DigitalSignatureAlgorithm}
	#{DolphinSureCertificate}
	#{DolphinSureCertificateInfo}
	#{DolphinSureCertificateStore}
	#{DolphinSureCertificationAuthorityCertificate}
	#{DolphinSurePersonalCertificate}
	#{DolphinSureTrustedData}
	#{NotSignedCertificate}
	#{NotTrustedError}
	#{ObjectArtsCertificate}
	#{ObjectArtsRootCertificate}
	#{PC1Cipher}
	#{SecureHashAlgorithm}
	#{TrustedDataError}
).

package setMethodNames: #(
	#(#{SourceManager} #emitSecureChunk:description:publisherCertificate:privateKey:on:)
	#(#{SourceManager} #secureChunkMarker)
	#(#{SourceManager} #secureFileIn:)
	#(#{SourceManager} #secureFileInFrom:)
	#(#{SourceManager} #secureFileItIn:)
).

package setPrerequisites: #(
	'..\Base\Dolphin'
	'..\Base\Dolphin Legacy Date & Time'
	'..\System\Random\Dolphin Random Stream'
	'..\Registry\Dolphin Registry Access'
).

package!

"Class Definitions"!

SharedPool subclass: #BCryptConstants
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
		'BCRYPT_3DES_112_ALGORITHM' -> '3DES_112'.
		'BCRYPT_3DES_ALGORITHM' -> '3DES'.
		'BCRYPT_AES_ALGORITHM' -> 'AES'.
		'BCRYPT_AES_CMAC_ALGORITHM' -> 'AES-CMAC'.
		'BCRYPT_AES_GMAC_ALGORITHM' -> 'AES-GMAC'.
		'BCRYPT_ALGORITHM_NAME' -> 'AlgorithmName'.
		'BCRYPT_AUTH_TAG_LENGTH' -> 'AuthTagLength'.
		'BCRYPT_BLOCK_LENGTH' -> 'BlockLength'.
		'BCRYPT_BLOCK_SIZE_LIST' -> 'BlockSizeList'.
		'BCRYPT_CHAINING_MODE' -> 'ChainingMode'.
		'BCRYPT_DES_ALGORITHM' -> 'DES'.
		'BCRYPT_DESX_ALGORITHM' -> 'DESX'.
		'BCRYPT_DH_ALGORITHM' -> 'DH'.
		'BCRYPT_DSA_ALGORITHM' -> 'DSA'.
		'BCRYPT_ECDH_P256_ALGORITHM' -> 'ECDH_P256'.
		'BCRYPT_ECDH_P384_ALGORITHM' -> 'ECDH_P384'.
		'BCRYPT_ECDH_P521_ALGORITHM' -> 'ECDH_P521'.
		'BCRYPT_ECDSA_P256_ALGORITHM' -> 'ECDSA_P256'.
		'BCRYPT_ECDSA_P384_ALGORITHM' -> 'ECDSA_P384'.
		'BCRYPT_ECDSA_P521_ALGORITHM' -> 'ECDSA_P521'.
		'BCRYPT_EFFECTIVE_KEY_LENGTH' -> 'EffectiveKeyLength'.
		'BCRYPT_HASH_BLOCK_LENGTH' -> 'HashBlockLength'.
		'BCRYPT_HASH_LENGTH' -> 'HashDigestLength'.
		'BCRYPT_HASH_OID_LIST' -> 'HashOIDList'.
		'BCRYPT_KEY_LENGTH' -> 'KeyLength'.
		'BCRYPT_KEY_LENGTHS' -> 'KeyLengths'.
		'BCRYPT_KEY_OBJECT_LENGTH' -> 'KeyObjectLength'.
		'BCRYPT_KEY_STRENGTH' -> 'KeyStrength'.
		'BCRYPT_MD2_ALGORITHM' -> 'MD2'.
		'BCRYPT_MD4_ALGORITHM' -> 'MD4'.
		'BCRYPT_MD5_ALGORITHM' -> 'MD5'.
		'BCRYPT_OBJECT_LENGTH' -> 'ObjectLength'.
		'BCRYPT_PADDING_SCHEMES' -> 'PaddingSchemes'.
		'BCRYPT_PROVIDER_HANDLE' -> 'ProviderHandle'.
		'BCRYPT_RC2_ALGORITHM' -> 'RC2'.
		'BCRYPT_RC4_ALGORITHM' -> 'RC4'.
		'BCRYPT_RNG_ALGORITHM' -> 'RNG'.
		'BCRYPT_RNG_DUAL_EC_ALGORITHM' -> 'DUALECRNG'.
		'BCRYPT_RNG_FIPS186_DSA_ALGORITHM' -> 'FIPS186DSARNG'.
		'BCRYPT_RSA_ALGORITHM' -> 'RSA'.
		'BCRYPT_RSA_SIGN_ALGORITHM' -> 'RSA_SIGN'.
		'BCRYPT_SHA1_ALGORITHM' -> 'SHA1'.
		'BCRYPT_SHA1_HASH_SIZE' -> 16r14.
		'BCRYPT_SHA256_ALGORITHM' -> 'SHA256'.
		'BCRYPT_SHA384_ALGORITHM' -> 'SHA384'.
		'BCRYPT_SHA512_ALGORITHM' -> 'SHA512'.
		'BCRYPT_SIGNATURE_LENGTH' -> 'SignatureLength'.
		'BCRYPT_STATUS_UNSUCCESSFUL' -> 16rC0000001
	}!
Object subclass: #DigitalSignatureAlgorithm
	instanceVariableNames: 'randKey randSeed'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
		'SmallPrimes' -> #(3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199 211 223 227 229 233 239 241 251 257 263 269 271 277 281 283 293 307 311 313 317 331 337 347 349 353 359 367 373 379 383 389 397 401 409 419 421 431 433 439 443 449 457 461 463 467 479 487 491 499 503 509 521 523 541 547 557 563 569 571 577 587 593 599 601 607 613 617 619 631 641 643 647 653 659 661 673 677 683 691 701 709 719 727 733 739 743 751 757 761 769 773 787 797 809 811 821 823 827 829 839 853 857 859 863 877 881 883 887 907 911 919 929 937 941 947 953 967 971 977 983 991 997 1009 1013 1019 1021 1031 1033 1039 1049 1051 1061 1063 1069 1087 1091 1093 1097 1103 1109 1117 1123 1129 1151 1153 1163 1171 1181 1187 1193 1201 1213 1217 1223 1229 1231 1237 1249 1259 1277 1279 1283 1289 1291 1297 1301 1303 1307 1319 1321 1327 1361 1367 1373 1381 1399 1409 1423 1427 1429 1433 1439 1447 1451 1453 1459 1471 1481 1483 1487 1489 1493 1499 1511 1523 1531 1543 1549 1553 1559 1567 1571 1579 1583 1597 1601 1607 1609 1613 1619 1621 1627 1637 1657 1663 1667 1669 1693 1697 1699 1709 1721 1723 1733 1741 1747 1753 1759 1777 1783 1787 1789 1801 1811 1823 1831 1847 1861 1867 1871 1873 1877 1879 1889 1901 1907 1913 1931 1933 1949 1951 1973 1979 1987 1993 1997 1999)
	}!
Object subclass: #DolphinSureCertificateInfo
	instanceVariableNames: 'serial owner details issued expiry publicKey'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Object subclass: #DolphinSureCertificateStore
	instanceVariableNames: 'regKey'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Object subclass: #DolphinSureTrustedData
	instanceVariableNames: 'data description signature publisherCertificate'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Object subclass: #PC1Cipher
	instanceVariableNames: 'key box i j'
	classVariableNames: 'RandPool'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Object subclass: #SecureHashAlgorithm
	instanceVariableNames: 'context'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
DolphinSureTrustedData subclass: #DolphinSureCertificate
	instanceVariableNames: ''
	classVariableNames: 'UntrustedContentWarning'
	imports: #(#{Win32Constants})
	classInstanceVariableNames: ''
	classConstants: {}!
DolphinSureCertificate subclass: #DolphinSureCertificationAuthorityCertificate
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
DolphinSureCertificate subclass: #DolphinSurePersonalCertificate
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
DolphinSureCertificate subclass: #NotSignedCertificate
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
DolphinSureCertificate subclass: #ObjectArtsCertificate
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
DolphinSureCertificationAuthorityCertificate subclass: #ObjectArtsRootCertificate
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Error subclass: #NotTrustedError
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Error subclass: #TrustedDataError
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
ExternalLibrary subclass: #BCryptLibrary
	instanceVariableNames: 'shaAlgorithmHandle'
	classVariableNames: ''
	imports: #(#{BCryptConstants})
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!SourceManager methodsFor!

emitSecureChunk: aString description: description publisherCertificate: certificate privateKey: privateKey on: aStream 
	"Private - Output the specified text as a trusted chunk on aStream"

	| trusted filer |
	trusted := Smalltalk.DolphinSureTrustedData 
				data: aString
				description: description
				publisherCertificate: certificate
				privateKey: privateKey.
	aStream
		nextPutAll: self secureChunkMarker;
		cr; cr.
	filer := self chunkFilerOn: aStream.
	filer emitChunk: trusted description; cr.
	filer emitChunk: trusted signature; cr.
	filer emitChunk: trusted publisherCertificate binaryStoreBytes fullPrintString; cr.
	filer emitChunk: trusted data.
	filer endChunk!

secureChunkMarker
	"Private - Answer marker than indicates a secure chunk"

	^'!!DolphinSureTrustedData secure!!'!

secureFileIn: aFileName
	"File the secure chunk format file in aFileName into the system.
	The file is first checked to see if it not in a secure format and, if not, then
	a warning is given to see if the user wished to continue with the file in."

	| stream |
	stream := FileStream read: aFileName.
	[self secureFileInFrom: stream] ensure: [stream close].!

secureFileInFrom: aStream
	"File the secure chunk format on aStream into the system.
	The stream is first checked to see if it not in a secure format and, if not, then
	a warning is given to see if the user wished to continue with the file in."

	| secureMarker actual pos |
	secureMarker := self secureChunkMarker.
	pos := aStream position.
	actual := aStream skipSeparators; nextAvailable: secureMarker size.
	aStream position: pos.
	((actual = secureMarker) or: [Smalltalk.NotSignedCertificate new confirmTrustFor: 'Unknown Content']) ifTrue: [ 
		self fileInFrom: aStream ]!

secureFileItIn: aString
	"File the secure chunk format Smalltalk expression in aString into the system.
	The string is first checked to see if it not in a secure format and, if not, then
	a warning is given to see if the user wished to continue with the file in."

	self secureFileInFrom: aString readStream! !
!SourceManager categoriesFor: #emitSecureChunk:description:publisherCertificate:privateKey:on:!private!source filing! !
!SourceManager categoriesFor: #secureChunkMarker!constants!private! !
!SourceManager categoriesFor: #secureFileIn:!public!source filing! !
!SourceManager categoriesFor: #secureFileInFrom:!private!source filing! !
!SourceManager categoriesFor: #secureFileItIn:!public!source filing! !

"End of package definition"!

