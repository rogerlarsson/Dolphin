| package |
package := Package name: 'Smalltalk Parser'.
package paxVersion: 2;
	preDeclareClassesOnLoad: false;
	basicComment: 'Dolphin Smalltalk Parser
Based on the Refactoring Browser parser (RBParser), copyright (c) John Brant & Don Roberts. 

The original RB parser has been modified in the following ways for Dolphin:

1) Dolphin format external methods (FFI calls) are parsed, and there are nodes/tokens specifically for this purpose.
2) The error reporting has been improved to use a specific exception, SmalltalkCompilerError, with more details of the error. Error codes are used rather than error strings, and the error messages are compatible with those from the original Dolphin compiler (where possible). The exception also includes the offending source range and line number, with the former being used to select the erroneous range in the Dolphin browsers.
3) The scanner has been optimized for improved performance.
4) A number of miscellaneous minor fixes and refactorings.
5) All classes renamed to avoid clashing with the originals.

These modifications are Copyright (c) Object Arts Ltd, 2002.

The parser remains compatible with the RBParser, and so can be used in conjunction with the RB refactoring engine. Note that the majority of RB specific methods and classes have been extracted to the RBParser package, which also contains global aliases mapping the class names used in the RB to the corresponding classes in this package.'.

package basicPackageVersion: '7.0'.


package setClassNames: #(
	#{PatternBlockToken}
	#{SmalltalkParser}
	#{SmalltalkScanner}
	#{StAbstractVariableNode}
	#{StAnnotationNode}
	#{StAssignmentNode}
	#{StAssignmentToken}
	#{StBinarySelectorToken}
	#{StBlockNode}
	#{StBraceArrayNode}
	#{StCascadeNode}
	#{StEofToken}
	#{StExternalArgTypeNode}
	#{StExternalCallNode}
	#{StIdentifierToken}
	#{StIllegalCharacterToken}
	#{StKeywordToken}
	#{StLiteralArrayNode}
	#{StLiteralArrayToken}
	#{StLiteralNode}
	#{StLiteralToken}
	#{StLiteralValueNode}
	#{StMessageNode}
	#{StMethodNode}
	#{StMultiKeywordLiteralToken}
	#{StNumberLiteralToken}
	#{StOptimizedNode}
	#{StOptimizedToken}
	#{StParameterNode}
	#{StParseNodeVisitor}
	#{StPrimitiveNode}
	#{StProgramNode}
	#{StQualifiedReferenceNode}
	#{StQualifiedReferenceToken}
	#{StReturnNode}
	#{StSelfVariableNode}
	#{StSequenceNode}
	#{StSpecialCharacterToken}
	#{StSpecialVariableNode}
	#{StSuperVariableNode}
	#{StTagNode}
	#{StTempDeclNode}
	#{StThisContextVariableNode}
	#{StToken}
	#{StValueNode}
	#{StValueToken}
	#{StVariableNode}
).

package setMethodNames: #(
	#(#{Behavior} #parseTreeFor:)
	#(#{CompiledCode} #parseTree)
	#(#{CompiledCode} #parseTreeNoError)
	#(#{CompiledCode} #parseTreeOnError:)
	#(#{CompiledExpression} #parseTreeOnError:)
	#(#{CompiledMethod} #parseTreeOnError:)
	#(#{CompileFailedMethod} #accessesInstVar:at:)
).

package setPrerequisites: #(
	'..\..\Base\Dolphin'
).

package!

"Class Definitions"!

Object subclass: #SmalltalkParser
	instanceVariableNames: 'scanner currentToken nextToken errorBlock methodNode st80Syntax comments methodClass source'
	classVariableNames: 'AllowEmptyStatements'
	imports: #(#{ExtCallArgTypes} #{SmalltalkParseErrorCodes})
	classInstanceVariableNames: ''
	classConstants: {}!
Object subclass: #SmalltalkScanner
	instanceVariableNames: 'stream buffer tokenStart currentCharacter characterType comments line errorHandler environment'
	classVariableNames: 'EscapeChars'
	imports: #(#{SmalltalkParseErrorCodes})
	classInstanceVariableNames: ''
	classConstants: {
		'ClassificationTable' -> #(#separator nil nil nil nil nil nil nil nil #separator #separator #separator #separator #separator nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil #separator #binary nil nil nil #binary #binary nil #special #special #binary #binary #binary #binary #special #binary #digit #digit #digit #digit #digit #digit #digit #digit #digit #digit #special #special #binary #binary #binary #binary #binary #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #special #binary #special #special #alphabetic nil #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #alphabetic #special #binary #special #binary nil).
		'PatternVariableCharacter' -> $`
	}!
Object subclass: #StParseNodeVisitor
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
Object subclass: #StProgramNode
	instanceVariableNames: 'parent comments'
	classVariableNames: 'FormatterClass SuperSearch'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
		'InlinedBlockSelectors' -> #(#ifTrue: #ifTrue:ifFalse: #ifFalse: #ifFalse:ifTrue: #whileTrue: #whileTrue #whileFalse: #whileFalse #to:do: #to:by:do: #and: #or: #repeat #ifNil: #ifNotNil: #ifNil:ifNotNil: #ifNotNil:ifNil:).
		'OptimizedSelectors' -> #(#ifTrue: #ifTrue:ifFalse: #ifFalse: #ifFalse:ifTrue: #whileTrue: #whileTrue #whileFalse: #whileFalse #to:do: #to:by:do: #and: #or: #repeat #ifNil: #ifNotNil: #ifNil:ifNotNil: #ifNotNil:ifNil: #yourself)
	}!
Object subclass: #StToken
	instanceVariableNames: 'start comments'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StProgramNode subclass: #StExternalArgTypeNode
	instanceVariableNames: 'typeOrdinal structClass indirections start stop'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StProgramNode subclass: #StMethodNode
	instanceVariableNames: 'selector selectorParts body source arguments tag replacements nodeReplacements methodClass'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StProgramNode subclass: #StReturnNode
	instanceVariableNames: 'return value'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StProgramNode subclass: #StSequenceNode
	instanceVariableNames: 'leftBar rightBar statements periods temporaries'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StProgramNode subclass: #StTagNode
	instanceVariableNames: 'start stop'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StProgramNode subclass: #StValueNode
	instanceVariableNames: 'parentheses'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StTagNode subclass: #StAnnotationNode
	instanceVariableNames: 'selector'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StTagNode subclass: #StExternalCallNode
	instanceVariableNames: 'nameOrOrdinal returnType argumentTypes flags callingConvention'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {
		'OverlappedMask' -> 16r1.
		'VirtualMask' -> 16r2
	}!
StTagNode subclass: #StPrimitiveNode
	instanceVariableNames: 'primitiveIndex errorTemp'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StValueNode subclass: #StAbstractVariableNode
	instanceVariableNames: 'start variable'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StValueNode subclass: #StAssignmentNode
	instanceVariableNames: 'variable assignment value'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StValueNode subclass: #StBlockNode
	instanceVariableNames: 'left right body arguments bar'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StValueNode subclass: #StBraceArrayNode
	instanceVariableNames: 'left statements periods right'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StValueNode subclass: #StCascadeNode
	instanceVariableNames: 'messages semicolons'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StValueNode subclass: #StLiteralNode
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StValueNode subclass: #StMessageNode
	instanceVariableNames: 'receiver selector selectorParts arguments'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StValueNode subclass: #StOptimizedNode
	instanceVariableNames: 'left right body value methodClass source'
	classVariableNames: 'UnevaluatedCookie'
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StAbstractVariableNode subclass: #StSpecialVariableNode
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StAbstractVariableNode subclass: #StVariableNode
	instanceVariableNames: 'name'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StSpecialVariableNode subclass: #StSelfVariableNode
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StSpecialVariableNode subclass: #StSuperVariableNode
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StSpecialVariableNode subclass: #StThisContextVariableNode
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StVariableNode subclass: #StParameterNode
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StVariableNode subclass: #StTempDeclNode
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StLiteralNode subclass: #StLiteralArrayNode
	instanceVariableNames: 'isByteArray stop contents start'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StLiteralNode subclass: #StLiteralValueNode
	instanceVariableNames: 'token'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StLiteralNode subclass: #StQualifiedReferenceNode
	instanceVariableNames: 'pathString meta start stop'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StToken subclass: #StAssignmentToken
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StToken subclass: #StEofToken
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StToken subclass: #StOptimizedToken
	instanceVariableNames: 'stopPosition'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StToken subclass: #StQualifiedReferenceToken
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StToken subclass: #StValueToken
	instanceVariableNames: 'value'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StValueToken subclass: #PatternBlockToken
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StValueToken subclass: #StBinarySelectorToken
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StValueToken subclass: #StIdentifierToken
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StValueToken subclass: #StIllegalCharacterToken
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StValueToken subclass: #StKeywordToken
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StValueToken subclass: #StLiteralArrayToken
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StValueToken subclass: #StLiteralToken
	instanceVariableNames: 'stopPosition'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StValueToken subclass: #StSpecialCharacterToken
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StLiteralToken subclass: #StMultiKeywordLiteralToken
	instanceVariableNames: ''
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!
StLiteralToken subclass: #StNumberLiteralToken
	instanceVariableNames: 'source'
	classVariableNames: ''
	imports: #()
	classInstanceVariableNames: ''
	classConstants: {}!

"Loose Methods"!

!Behavior methodsFor!

parseTreeFor: aSymbol 
	^SmalltalkParser parseMethod: (self sourceCodeAt: aSymbol)
		in: self
		onError: [:aString :pos | ^nil]! !
!Behavior categoriesFor: #parseTreeFor:!public!RefactoringBrowser! !

!CompiledCode methodsFor!

parseTree
	^self parseTreeOnError: nil!

parseTreeNoError
	^self parseTreeOnError: [:err | ^nil]!

parseTreeOnError: aBlock 
	^self subclassResponsibility! !
!CompiledCode categoriesFor: #parseTree!parsing!public! !
!CompiledCode categoriesFor: #parseTreeNoError!parsing!public! !
!CompiledCode categoriesFor: #parseTreeOnError:!parsing!public! !

!CompiledExpression methodsFor!

parseTreeOnError: aBlock 
	^SmalltalkParser 
		parseExpression: self getSource
		in: self methodClass
		onError: aBlock! !
!CompiledExpression categoriesFor: #parseTreeOnError:!parsing!public! !

!CompiledMethod methodsFor!

parseTreeOnError: aBlock 
	^SmalltalkParser 
		parseMethod: self getSource
		in: self methodClass
		onError: aBlock! !
!CompiledMethod categoriesFor: #parseTreeOnError:!parsing!public! !

!CompileFailedMethod methodsFor!

accessesInstVar: aString at: anInteger
	"Answer whether the receiver accesses the instance variable named, aString, which
	is the instance variable of its method class with the specified <integer> index."

	^self refersToVariable: aString! !
!CompileFailedMethod categoriesFor: #accessesInstVar:at:!development!public!testing! !

"End of package definition"!

